import copy
import random
GlidScale = (10, 5)
BoardGlidValues = []
for _ in range(GlidScale[1]):
    BoardGlidValues += [[" "]*int(GlidScale[0])]
turn = 0
mode = "PvP"
lastPlace = None

def Print_Board():
    print()
    for i in range(GlidScale[0]):
        print(f"  {i} ", end="")
    print(" ")
    print("+---"*GlidScale[0] + "+")
    for y in range(GlidScale[1]):
        for x in range(GlidScale[0]):
            if lastPlace == None or lastPlace[0] != x or lastPlace[1] != y:
                print(f"| {BoardGlidValues[y][x]} ", end="")
            elif lastPlace[0] == x and lastPlace[1] == y:
                print(f"|*{BoardGlidValues[y][x]}*", end="")
        print("|")
    print("+---"*GlidScale[0] + "+")
    print()

def check_winner(glid_list, mark):
    for y in range(GlidScale[1]):
        for x in range(GlidScale[0]):
            if glid_list[y][x] == mark and x+4 <= GlidScale[0]:
                if glid_list[y][x+1] == mark and glid_list[y][x+2] == mark and glid_list[y][x+3] == mark:
                    return True
                if y+4 <= GlidScale[1]:
                    if glid_list[y+1][x+1] == mark and glid_list[y+2][x+2] == mark and glid_list[y+3][x+3] == mark:
                        return True
                if y-3 >= 0:
                    if glid_list[y-1][x+1] == mark and glid_list[y-2][x+2] == mark and glid_list[y-3][x+3] == mark:
                        return True
            if glid_list[y][x] == mark and y+4 <= GlidScale[1]:
                if glid_list[y+1][x] == mark and glid_list[y+2][x] == mark and glid_list[y+3][x] == mark:
                    return True
    return False

def PvC_cal(cal_num, temporary_board, temporary_turn):
    if cal_num == 0:
        return 0
    reward = 0
    for x in range(GlidScale[0]):
        for y in range(GlidScale[1]):
            if temporary_board[y][x] == " ":
                if y+1 < GlidScale[1]:
                    if temporary_board[y+1][x] != " ":
                        if temporary_turn == 0:
                            temporary_board[y][x] = "X"
                            if check_winner(temporary_board, "X"):
                                reward -= 1
                                temporary_board[y][x] = " "
                                break
                            reward += PvC_cal(cal_num-1, copy.deepcopy(temporary_board), 1-temporary_turn)
                            temporary_board[y][x] = " "
                        elif temporary_turn == 1:
                            temporary_board[y][x] = "O"
                            if check_winner(temporary_board, "O"):
                                reward += 1
                                temporary_board[y][x] = " "
                                break
                            reward += PvC_cal(cal_num-1, copy.deepcopy(temporary_board), 1-temporary_turn)
                            temporary_board[y][x] = " "
                else:
                    if temporary_turn == 0:
                        temporary_board[y][x] = "X"
                        if check_winner(temporary_board, "X"):
                            reward -= 1
                            temporary_board[y][x] = " "
                            break
                        reward += PvC_cal(cal_num-1, copy.deepcopy(temporary_board), 1-temporary_turn)
                        temporary_board[y][x] = " "
                    elif temporary_turn == 1:
                        temporary_board[y][x] = "O"
                        if check_winner(temporary_board, "O"):
                            reward += 1
                            temporary_board[y][x] = " "
                            break
                        reward += PvC_cal(cal_num-1, copy.deepcopy(temporary_board), 1-temporary_turn)
                        temporary_board[y][x] = " "
    return reward

def com_turn():
    Copy_of_Board = copy.deepcopy(BoardGlidValues)
    reward_list = []
    for _ in range(GlidScale[0]):
        reward_list += [0]
    for x in range(GlidScale[0]):
        for y in range(GlidScale[1]):
            if BoardGlidValues[y][x] == " ":
                if y+1 < GlidScale[1]:
                    if BoardGlidValues[y+1][x] != " ":
                        Copy_of_Board[y][x] = "O"
                        reward_list[x] = PvC_cal(3, Copy_of_Board, 0)
                        Copy_of_Board[y][x] = " "
                        break
                else:
                    Copy_of_Board[y][x] = "O"
                    reward_list[x] = PvC_cal(3, Copy_of_Board, 0)
                    Copy_of_Board[y][x] = " "
                    break
    notFullRows = [[i, num] for i, num in enumerate(reward_list) if BoardGlidValues[0][i] == " "]
    x = random.choice([i for i, num in notFullRows if num == max([_[1] for _ in notFullRows])])
    for y in range(GlidScale[1]):
        if BoardGlidValues[y][x] == " ":
            if y+1 < GlidScale[1]:
                if BoardGlidValues[y+1][x] != " ":
                    BoardGlidValues[y][x] = "O"
                    global lastPlace
                    lastPlace = [x, y]
                    print(f"コンピュータのターンです(コマ：O)。コマは第{x}行に置かれました。")
            else:
                BoardGlidValues[y][x] = "O"
                lastPlace = [x, y]
                print(f"コンピュータのターンです(コマ：O)。コマは第{x}行に置かれました。")

while True:
    try:
        print()
        input_mode_value = int(input("PvPなら0, PvCなら1を入力してください。："))
        if input_mode_value == 0:
            mode = "PvP"
            break
        elif input_mode_value == 1:
            mode = "PvC"
            break
    except:
        print("無効な値です。")

print("ゲームスタート！")
Print_Board()
while True:
    try:
        if mode == "PvP" or mode == "PvC" and turn == 0:
            if mode == "PvP":
                input_value = input(f"プレイヤー{turn+1}のターンです(コマ：{'X' if turn == 0 else 'O'})。コマを置きたい行を入力(qで終了)：")
            elif mode == "PvC":
                input_value = input("あなたのターンです(コマ：X)。コマを置きたい行を入力(qで終了)：")
            if input_value == "q":
                print("ゲームを終了します。\n")
                break
            try:
                input_value = int(input_value)
                if 0 <= input_value <= GlidScale[0]-1:
                    for n in range(GlidScale[1]-1, -1, -1):
                        if BoardGlidValues[n][input_value] == " ":
                            BoardGlidValues[n][input_value] = "X" if turn == 0 else "O"
                            lastPlace = [input_value, n]
                            turn = 1 - turn
                            break
                        elif n == 0:
                            print("その行はすでに埋まっています。他の行を選んでください。")
                else:
                    print(f"範囲外です。0から{GlidScale[0]-1}の行の値を選んでください。")
            except:
                print(f"0から{GlidScale[0]-1}の数字かqを入力してください。")
        else:
            com_turn()
            turn = 1 - turn
        Print_Board()
    except:
        print("無効な値です。")

    if check_winner(BoardGlidValues, "X"):
        print("プレイヤー1(コマ：X)の勝ち！")
        print("ゲームを終了します。")
        print()
        break
    if check_winner(BoardGlidValues, "O"):
        if mode == "PvP":
            print("プレイヤー2(コマ：O)の勝ち！")
        elif mode == "PvC":
            print("コンピュータ(コマ：O)の勝ち！")
        print("ゲームを終了します。")
        print()
        break
